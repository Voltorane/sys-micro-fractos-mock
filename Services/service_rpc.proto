syntax = "proto3";

option java_multiple_files = true;
option java_outer_classname = "Service_Connector";
option objc_class_prefix = "SERVCONN";

package service_connector;

message Response {
    int32 response_code = 1;
    string description = 2;
}

service Predictor {
  // Sends a prediction
  rpc Prediction (PredictionRequest) returns (Response) {}
  // initializes the CNN with the given parameters
  rpc Initialization (InitRequest) returns (Response) {}
}

message PredictionRequest {
    string image = 1;
    int32 img_width = 2;
    int32 img_height = 3;
    string client_id = 4;
    repeated string next_request = 6;
}

message InitRequest {
    int32 sample_limit = 1;
    int32 epochs = 2;
    int32 img_width = 3;
    int32 img_height = 4;
    repeated string next_request = 6;
}

service OutputCollector {
  // Send output from computational node to storage node (typically not the sender node)
    rpc StorePrediction (PredictionStorageRequest) returns (Response) {}
    rpc StoreInt (IntStorageRequest) returns (Response) {}
}

message PredictionStorageRequest {
    string data = 1;
    string name = 2;
    string storage_id = 3;
    repeated string next_request = 6;
}

message IntStorageRequest{
    int32 data = 1;
    string name = 2;
    string storage_id = 3;
    repeated string next_request = 4;
}

service DataSender {
    rpc SendImage (ImageSendRequest) returns (Response) {}
    rpc SendInt (IntSendRequest) returns (Response) {}
}

message ImageSendRequest {
    string name = 1;
    int32 img_width = 2;
    int32 img_height = 3;
    string client_id = 4;
    repeated string next_request = 6;
}

message IntSendRequest{
    string name = 1;
    string client_id = 4;
    repeated string next_request = 6;
}

service ApplicationStarter {
    // starts application
    rpc SendInitialRequest (ApplicationInitRequest) returns (Response) {}
}

message ApplicationInitRequest {
    repeated string request = 1;
}

service MathComputer {
    rpc ComputeFact (ComputeFactRequest) returns (Response) {}
    rpc ComputeBinom (ComputeBinomRequest) returns (Response) {}
}


message ComputeFactRequest {
    int32 n = 1;
}

message ComputeBinomRequest {
    int32 n = 1;
    int32 k = 2;
}